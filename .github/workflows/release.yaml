name: Release
on:
  push:
    branches:
      # TODO(tie): allow release/v* for backports?
      - release
  workflow_dispatch:
    inputs:
      base:
        description: 'Base version'
        required: false
        default: ''
      version:
        description: 'New version'
        required: false
        default: ''

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    env:
      GOFLAGS: -trimpath
      # Ensure that we have a chance to remove tags for failed release
      # before they are added to global sumdb and goproxy cache.
      #
      # Use version retraction if we can’t safely revert release.
      # See https://blog.golang.org/go116-module-changes#TOC_5.
      #
      GOPRIVATE: github.com/genjidb/genji
    outputs:
      version: ${{ steps.changelog.outputs.version }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    if: ${{ github.ref != 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      - name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16.3

      - name: Get Go environment
        id: go-env
        run: |
          echo "::set-output name=cache::$(go env GOCACHE)"
          echo "::set-output name=modcache::$(go env GOMODCACHE)"
      - name: Set up cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ${{ steps.go-env.outputs.cache }}
            ${{ steps.go-env.outputs.modcache }}
          key: release-go-${{ hashFiles('**/go.sum') }}
          restore-keys: release-go-

      - name: Install x/exp/cmd/gorelease
        run: go install golang.org/x/exp/cmd/gorelease@v0.0.0-20210513165259-bd7cc9f9ec66

      - name: Set up Git config
        run: |
          git config user.name actions-user
          git config user.email actions@github.com

      # 1.1. Prepare github.com/genjidb/genji module.
      #
      # This step will fail if version from input is not a valid semantic version for this release.
      # We use the version suggested by gorelease tool if there is no input (workflow on push event).
      # The base version is inferred from the new version and defaults to latest release.
      #
      - name: Generate changelog
        run: |
          gorelease -base=${{ github.event.inputs.base }} -version=${{ github.event.inputs.version }} | tee changelog.txt
      - name: Extract version from changelog
        id: changelog
        run: |
          perl -n -e '
            if (s/^Suggested version: (.*)/::set-output name=version::$1/) { print }
            if (s/^(.*) is a valid semantic version for this release.$/::set-output name=version::$1/) { print }
          ' changelog.txt
      - name: Amend changelog
        run: perl -0pi -e 's/(\n.+)+\n+$//' changelog.txt

      # 1.2. Prepare github.com/genjidb/genji/engine/badgerengine module.
      #
      # Note that we use steps.changelog.outputs.version instead of github.event.inputs.version
      # to ensure that submodule version always corresponds to root module release.
      #
      - name: Generate changelog for engine/badgerengine
        working-directory: engine/badgerengine
        run: gorelease -base=${{ github.event.inputs.base }} -version=${{ steps.changelog.outputs.version }} | tee changelog.txt
      - name: Amend changelog for engine/badgerengine
        working-directory: engine/badgerengine
        run: perl -0pi -e 's/(\n.+)+\n+$//' changelog.txt

      # 2.1. Create tag for github.com/genjidb/genji module.
      #
      - name: Bump github.com/genjidb/genji
        run: |
          git tag ${{ steps.changelog.outputs.version }}
          git push --tags

      # 2.2. Create tag for github.com/genjidb/genji/engine/badgerengine module.
      #
      - name: Bump github.com/genjidb/genji/engine/badgerengine
        working-directory: engine/badgerengine
        run: |
          go mod edit -dropreplace=github.com/genjidb/genji
          go get github.com/genjidb/genji@${{ steps.changelog.outputs.version }}
          go mod tidy
          go mod edit -replace=github.com/genjidb/genji=../../
          git add go.mod go.sum
          git commit -m 'Bump engine/badgerengine to ${{ steps.changelog.outputs.version }}'
          git tag engine/badgerengine/${{ steps.changelog.outputs.version }}
          git push && git push --tags

      # 2.3 Create tag for github.com/genjidb/genji/cmd/genji module.
      #
      - name: Bump github.com/genjidb/genji/cmd/genji
        working-directory: cmd/genji
        run: |
          go mod edit \
            -dropreplace=github.com/genjidb/genji \
            -dropreplace=github.com/genjidb/engine/badgerengine
          go get \
            github.com/genjidb/genji@${{ steps.changelog.outputs.version }} \
            github.com/genjidb/genji/engine/badgerengine@${{ steps.changelog.outputs.version }}
          go mod tidy
          go mod edit \
            -replace=github.com/genjidb/genji=../../ \
            -replace=github.com/genjidb/engine/badgerengine=../../
          git add go.mod go.sum
          git commit -m 'Bump cmd/genji to ${{ steps.changelog.outputs.version }}'
          git tag cmd/genji/${{ steps.changelog.outputs.version }}
          git push && git push --tags

      # 3.1. Create GitHub release draft.
      #
      - name: Merge changelogs
        run: |
          echo >>changelog.txt && cat engine/badgerengine/changelog.txt >>changelog.txt
      - name: Publish release
        id: release
        uses: actions/create-release@v1.1.4
        with:
          draft: true
          tag_name: cmd/genji/${{ steps.changelog.outputs.version }}
          release_name: ${{ steps.changelog.outputs.version }}
          body_path: changelog.txt
          prerelease: ${{ contains(steps.changelog.outputs.version, '-') }}

      # 3.2. Create PR with changes we’ve made.
      #
      - name: Clean up
        run: git clean -xfd
      - name: Get branch name
        id: github-ref
        run: |
          echo "::set-output name=short::${GITHUB_REF#refs/*/}"
      - name: Create PR
        uses: peter-evans/create-pull-request@v3.9.1
        with:
          author: GitHub <actions@github.com>
          committer: GitHub <actions@github.com>
          branch: ${{ steps.github-ref.outputs.short }}
          delete-branch: true
          title: Bump version to ${{ steps.changelog.outputs.version }}
          body: |
            This PR merges changes made when bumping version to ${{ steps.changelog.outputs.version }}.

            See https://github.com/genjidb/genji/releases/tag/cmd/genji/${{ steps.changelog.outputs.version }}
