name: Ubuntu
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run:
    name: Run
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOFLAGS: '-trimpath -mod=readonly'
      GO111MODULE: 'on'
    strategy:
      fail-fast: false
      matrix:
        go:
          - 1.15.x
        goos:
          - linux
        goarch:
          - amd64
          - arm
          - arm64
        main:
          - genji
          - genji/fuzz
          - genji/cmd/genji
          - genji/engine/badgerengine
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Set up environment
        uses: actions/github-script@v3
        with:
          script: |
            // Set -race flag for supported targets.
            switch (process.env.GOARCH) {
            case 'amd64':
            case 'arm64':
              core.exportVariable('GOFLAGS', `${process.env.GOFLAGS} -race`)
              core.exportVariable('CGO_ENABLED', '1')
              break
            default:
              core.exportVariable('CGO_ENABLED', '0')
              core.exportVariable('GO_EXTLINK_ENABLED', '0')
              break
            }

            const { spawnSync, execSync } = require('child_process')
            const https = require('https')
            const fs = require('fs')

            const sudo = (args) => {
              const ret = spawnSync('sudo', args, {
                stdio: 'inherit',
              })
              if (ret.status !== 0) {
                throw `exit code ${ret.status}`
              }
              return ret
            }

            // Install QEMU and GCC cross compiler. We only need that for -race flag.
            const packages = ['qemu-user', 'qemu-user-binfmt']
            switch (process.env.GOARCH) {
            case 'arm':
              // No Cgo here.
            case 'arm64':
              sudo(['dpkg', '--add-architecture', 'arm64'])
              sudo(['apt-get', 'update'])
              packages.push('gcc-aarch64-linux-gnu')
              packages.push('libc6-dev-arm64-cross')
              packages.push('libtsan0-arm64-cross')
              packages.push('libc6:arm64')
              core.exportVariable('CC', 'aarch64-linux-gnu-gcc')
              core.exportVariable('PKG_CONFIG_PATH', `/usr/lib/aarch64-linux-gnu/pkgconfig`)
              break
            default:
              return // GOARCH is supported by the host
            }
            sudo(['apt-get', 'install', '-y', '--no-install-recommends', ...packages])

            if (process.env.CGO_ENABLED != '1') {
              return // Cgo disabled, donâ€™t download runtime.
            }

            // Prebuilt Go releases do not contain race runtime for non-host architectures.
            // Download syso object for the latest known release and place it in GOROOT.
            const tpl = `
              {{- $v := "master" -}}
              {{- range context.ReleaseTags -}}
                {{- $v = . -}}
              {{- end -}}
              {{- $v -}}
            `
            const args = ['list', '-f', tpl, 'runtime/race']
            const goVersion = spawnSync('go', args).stdout.toString()

            const goroot = execSync('go env GOROOT').toString().trim()

            const sysoName = `race_${process.env.GOOS}_${process.env.GOARCH}.syso`
            const sysoPath = `src/runtime/race/${sysoName}`
            const sysoURL = `https://ghcdn.rawgit.org/golang/go/${goVersion}/${sysoPath}`

            core.info(`Downloading ${sysoName} from ${sysoURL}`)

            const dest = fs.createWriteStream(`${goroot}/${sysoPath}`)
            https.get(sysoURL, (resp) => {
              resp.pipe(dest)
            }).on('error', (err) => {
              core.setFailed(`download race runtime: ${err}`)
            })

      - name: Get cache path
        run: echo "::set-output name=dir::$(go env GOMODCACHE)"
        id: modcache

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.modcache.outputs.dir }}
          key: modcache-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: modcache-

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: genji

      - name: Checkout corpus
        uses: actions/checkout@v2
        with:
          repository: genjidb/go-fuzz-corpus
          path: genji/fuzz/testdata/fuzz

      - name: Download dependencies
        run: go mod download
        working-directory: ${{ matrix.main }}

      - name: Run tests
        run: go test -v -coverprofile=coverage.txt -covermode=atomic -timeout=2m ./...
        working-directory: ${{ matrix.main }}

      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          directory: ${{ matrix.main }}
