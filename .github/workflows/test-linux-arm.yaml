name: Test on linux/arm
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run:
    name: Run
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
    strategy:
      fail-fast: false
      matrix:
        go:
          - 1.14.x
          - 1.15.x
        goos:
          - linux
        goarch:
          - armv5
          - armv6
          - armv7
        main:
          - genji
          - genji/fuzz
          - genji/cmd/genji
          - genji/engine/badgerengine
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Set up environment
        uses: actions/github-script@v3
        with:
          script: |
            const { execFileSync } = require('child_process')
            const https = require('https')
            const fs = require('fs')
            const path = require('path')

            // Set up Go environment variables.

            core.exportVariable('GOFLAGS', '-trimpath -mod=readonly')

            // Apply GOARCH/GOARM hack.

            const [goarch, goarm] = process.env.GOARCH.split('v')
            core.exportVariable('GOARCH', goarch)
            core.exportVariable('GOARM', goarm)

            // Get a list of go release tags.

            const releaseTags = execFileSync('go', [
              'list', '-f',
              '{{range context.ReleaseTags}}{{println .}}{{end}}',
              'runtime',
            ]).toString().split(/\r?\n/)

            // Export cache paths for further steps.

            const buildCache = execFileSync('go', ['env', 'GOCACHE']).toString().trim()
            core.exportVariable('GOCACHE', buildCache)

            if (releaseTags.includes('go1.15')) {
              const modcache = execFileSync('go', ['env', 'GOMODCACHE']).toString().trim()
              core.exportVariable('GOMODCACHE', modcache)
            } else {
              const gopath = execFileSync('go', ['env', 'GOPATH']).toString().trim()
              const modcache = path.join(gopath, 'pkg', 'mod')
              core.exportVariable('GOMODCACHE', modcache)
            }

            // Install QEMU.

            const rc = execFileSync('sudo', [
              'apt-get', 'install',
              '--no-install-recommends', '-y',
              'qemu-user',
              'qemu-user-binfmt',
            ], {
              stdio: 'inherit',
            })

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GOMODCACHE }}
            ${{ env.GOCACHE }}
          key: modcache-${{ env.GOOS }}-${{ env.GOARCH }}-${{ hashFiles('**/go.sum') }}
          restore-keys: modcache-

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: genji

      - name: Checkout corpus
        uses: actions/checkout@v2
        with:
          repository: genjidb/go-fuzz-corpus
          path: genji/fuzz/testdata/fuzz

      - name: Download dependencies
        run: go mod download
        working-directory: ${{ matrix.main }}

      - name: Run tests
        run: go test -v -coverprofile=coverage.txt -covermode=atomic -timeout=2m ./...
        working-directory: ${{ matrix.main }}

      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          directory: ${{ matrix.main }}
