name: Test on linux/ppc64le
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run:
    name: Run
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        go:
          - 1.14.x
          - 1.15.x
        platform:
          - linux/ppc64le
        main:
          - genji
          - genji/fuzz
          - genji/cmd/genji
          - genji/engine/badgerengine
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Set up environment
        uses: actions/github-script@v3
        env:
          platform: ${{ matrix.platform }}
        with:
          script: |
            const { execFileSync } = require('child_process')
            const https = require('https')
            const fs = require('fs')
            const path = require('path')

            // Set up Go environment variables.

            const [goos, goarch] = process.env.platform.split('/')
            core.exportVariable('GOOS', goos)
            core.exportVariable('GOARCH', goarch)

            core.exportVariable('GOFLAGS', '-race -trimpath -mod=readonly')

            // Enable Cgo explicitly for -race flag since we are cross compiling.

            core.exportVariable('CGO_ENABLED', '1')
            core.exportVariable('CC', 'powerpc64le-linux-gnu-gcc')

            // Get a list of go release tags.

            const releaseTags = execFileSync('go', [
              'list', '-f',
              '{{range context.ReleaseTags}}{{println .}}{{end}}',
              'runtime',
            ]).toString().trim().split(/\r?\n/)

            // Export cache paths for further steps.

            const buildCache = execFileSync('go', ['env', 'GOCACHE']).toString().trim()
            core.exportVariable('GOCACHE', buildCache)

            if (releaseTags.includes('go1.15')) {
              const modcache = execFileSync('go', ['env', 'GOMODCACHE']).toString().trim()
              core.exportVariable('GOMODCACHE', modcache)
            } else {
              const gopath = execFileSync('go', ['env', 'GOPATH']).toString().trim()
              const modcache = path.join(gopath, 'pkg', 'mod')
              core.exportVariable('GOMODCACHE', modcache)
            }

            // Install QEMU and GCC cross compiler.

            execFileSync('sudo', [
              'apt-get', 'install',
              '--no-install-recommends', '-y',
              'qemu-user',
              'qemu-user-binfmt',
              'gcc-powerpc64le-linux-gnu',
              'libc6-dev-ppc64el-cross',
              'libtsan0-ppc64el-cross',
            ], {
              stdio: 'inherit',
            })

            // Pass target sysroot and program loader path to QEMU.

            core.exportVariable('QEMU_LD_PREFIX', '/usr/powerpc64le-linux-gnu')

            // Prebuilt Go releases do not contain race detector runtime for non-host architectures.
            // Download syso object for the latest known **major** release and place it in GOROOT.

            const latestReleaseTag = (() => {
              if (releaseTags.includes('go1.15') && process.env.platform == 'linux/ppc64le') {
                // See https://github.com/golang/go/issues/42080
                return 'go1.15rc1'
              }
              return releaseTags[releaseTags.length-1]
            })()

            const goroot = execFileSync('go', ['env', 'GOROOT']).toString().trim()

            const sysoName = `race_${process.env.GOOS}_${process.env.GOARCH}.syso`
            const sysoPath = `src/runtime/race/${sysoName}`
            const sysoDest = `${goroot}/${sysoPath}`
            const sysoURL = 'https://raw.githubusercontent.com/golang/go'
                          + `/${latestReleaseTag}/${sysoPath}`

            core.info(`Downloading ${sysoName} to ${sysoDest} from ${sysoURL}`)
            https.get(sysoURL, (resp) => {
              if (resp.statusCode !== 200) {
                core.setFailed(`download race runtime: ${resp.statusCode} ${resp.statusMessage}`)
                return
              }
              const dest = fs.createWriteStream(sysoDest)
              resp.pipe(dest)
            }).on('error', (err) => {
              core.setFailed(`download race runtime: ${err}`)
            })

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GOMODCACHE }}
            ${{ env.GOCACHE }}
          key: modcache-${{ env.GOOS }}-${{ env.GOARCH }}-${{ hashFiles('**/go.sum') }}
          restore-keys: modcache-

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: genji

      - name: Checkout corpus
        uses: actions/checkout@v2
        with:
          repository: genjidb/go-fuzz-corpus
          path: genji/fuzz/testdata/fuzz

      - name: Download dependencies
        run: go mod download
        working-directory: ${{ matrix.main }}

      - name: Run tests
        run: go test -coverprofile=coverage.txt ./...
        working-directory: ${{ matrix.main }}

      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          directory: ${{ matrix.main }}
