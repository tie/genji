name: Test all
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
    steps:
      - name: Prepare job matrix
        id: matrix
        uses: actions/github-script@v3
        with:
          script: |
            // Default matrix is not powerful enough for what we are doing here.
            // E.g. the following matrix results in [(ubuntu-latest, linux/amd64)].
            //
            //   runner:
            //   - ubuntu-latest
            //   include:
            //   - runner: ubuntu-latest
            //     target: linux/amd64
            //   - runner: ubuntu-latest
            //     target: linux/arm
            //
            // But we can include new combinations if the are no matches in the matrix.
            // In a simple case like example above itâ€™s enough to remove runner from
            // initial matrix. Our case is more complicated, so we precompute cartesian
            // products and pass the resulting matrix to the next job.

            // https://stackoverflow.com/a/43053803
            const cartesian =
              (...a) => a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e].flat())))

            const matrix = cartesian([
              '1.15.x',
              '1.14.x',
            ], [
              ...cartesian([
                'ubuntu-20.04',
              ], [
                'linux/amd64',
                'linux/arm64',
                'linux/ppc64',
                'linux/ppc64le',
                'linux/s390x',
                'linux/386',
                'linux/armv5',
                'linux/armv6',
                'linux/armv7',
              ]),
              ...cartesian([
                'macos-latest',
              ], [
                'darwin/amd64',
              ]),
              ...cartesian([
                'windows-latest',
              ], [
                'windows/amd64',
                'windows/386',
              ]),
            ])
            core.info(`Built matrix with ${matrix.length} jobs`)
            return {
              include: matrix.map(([go, runner, target]) => ({ target, go, runner })),
            }
  run:
    name: Run
    needs: prepare
    timeout-minutes: 5
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Checkout corpus
        uses: actions/checkout@v2
        with:
          repository: genjidb/go-fuzz-corpus
          path: fuzz/testdata/fuzz

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Set up environment
        uses: actions/github-script@v3
        env:
          target: ${{ matrix.target }}
        with:
          script: |
            const path = require('path')
            const scriptName = path.join('.github', 'workflows', 'scripts', 'setup-env.js')
            const scriptPath = path.join(process.env.GITHUB_WORKSPACE, scriptName)
            const script = require(scriptPath)
            return await script({ github, context, core, io })

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GOMODCACHE }}
            ${{ env.GOCACHE }}
          key: modcache-${{ env.GOOS }}-${{ env.GOARCH }}-${{ hashFiles('**/go.sum') }}
          restore-keys: modcache-

      - name: Run tests
        uses: actions/github-script@v3
        with:
          script: |
            const path = require('path')
            const scriptName = path.join('.github', 'workflows', 'scripts', 'test-all.js')
            const scriptPath = path.join(process.env.GITHUB_WORKSPACE, scriptName)
            const script = require(scriptPath)
            return await script({ github, context, core, io })

      - name: Upload coverage
        uses: codecov/codecov-action@v1
